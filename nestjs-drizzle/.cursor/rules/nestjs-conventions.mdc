---
globs: *.ts,*.js
description: NestJS v11 개발 컨벤션 및 베스트 프랙티스
---

# NestJS v11 개발 컨벤션

## 파일 네이밍 컨벤션

- **Controllers**: `*.controller.ts`
- **Services**: `*.service.ts`
- **Modules**: `*.module.ts`
- **Guards**: `*.guard.ts`
- **Interceptors**: `*.interceptor.ts`
- **Filters**: `*.filter.ts`
- **Pipes**: `*.pipe.ts`
- **DTOs**: `*.dto.ts`
- **Entities/Schemas**: `*.entity.ts` 또는 `*.schema.ts`

## 코딩 스타일

### 1. 데코레이터 사용
```typescript
@Controller('users')
@UseGuards(AuthGuard)
export class UsersController {
  @Get()
  @ApiOperation({ summary: '사용자 목록 조회' })
  async findAll(): Promise<User[]> {
    return this.usersService.findAll();
  }
}
```

### 2. 의존성 주입
```typescript
@Injectable()
export class UsersService {
  constructor(
    private readonly userRepository: UserRepository,
    private readonly logger: Logger,
  ) {}
}
```

### 3. 예외 처리
```typescript
import { HttpException, HttpStatus } from '@nestjs/common';

throw new HttpException('사용자를 찾을 수 없습니다', HttpStatus.NOT_FOUND);
```

### 4. DTO 검증
```typescript
import { IsEmail, IsNotEmpty, MinLength } from 'class-validator';

export class CreateUserDto {
  @IsEmail({}, { message: '올바른 이메일 형식이 아닙니다' })
  email: string;

  @IsNotEmpty({ message: '비밀번호는 필수입니다' })
  @MinLength(8, { message: '비밀번호는 최소 8자 이상이어야 합니다' })
  password: string;
}
```

## 모듈 구성

### 기본 모듈 구조
```typescript
@Module({
  imports: [TypeOrmModule.forFeature([User])],
  controllers: [UsersController],
  providers: [UsersService],
  exports: [UsersService],
})
export class UsersModule {}
```

## 환경변수 관리

- `.env` 파일 사용
- `@nestjs/config` 모듈 활용
- 타입 안전한 설정 객체 생성

```typescript
export interface DatabaseConfig {
  host: string;
  port: number;
  username: string;
  password: string;
  database: string;
}
```

## 로깅

- NestJS 내장 Logger 사용
- 각 서비스에서 Logger 주입
- 적절한 로그 레벨 사용 (error, warn, log, debug, verbose)