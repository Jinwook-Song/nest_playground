---
globs: *.ts,*.schema.ts,drizzle.config.ts
description: Drizzle ORM 사용법 및 스키마 정의 가이드
---

# Drizzle ORM 가이드

## 스키마 정의

### 기본 테이블 정의

```typescript
import {
  pgTable,
  serial,
  varchar,
  timestamp,
  boolean,
} from 'drizzle-orm/pg-core';

export const users = pgTable('users', {
  id: serial('id').primaryKey(),
  email: varchar('email', { length: 255 }).notNull().unique(),
  password: varchar('password', { length: 255 }).notNull(),
  name: varchar('name', { length: 100 }).notNull(),
  isActive: boolean('is_active').default(true),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
});

export type User = typeof users.$inferSelect;
export type NewUser = typeof users.$inferInsert;
```

### 관계 정의

```typescript
import { relations } from 'drizzle-orm';

export const usersRelations = relations(users, ({ many }) => ({
  posts: many(posts),
}));

export const posts = pgTable('posts', {
  id: serial('id').primaryKey(),
  title: varchar('title', { length: 255 }).notNull(),
  content: text('content'),
  authorId: integer('author_id').references(() => users.id),
  createdAt: timestamp('created_at').defaultNow(),
});

export const postsRelations = relations(posts, ({ one }) => ({
  author: one(users, {
    fields: [posts.authorId],
    references: [users.id],
  }),
}));
```

## 데이터베이스 연결

### 연결 설정

```typescript
import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
import * as schema from './schema';

const connectionString = process.env.DATABASE_URL;
const client = postgres(connectionString);
export const db = drizzle(client, { schema });
```

### NestJS에서 주입

```typescript
@Injectable()
export class UsersService {
  constructor(
    @Inject('DATABASE_CONNECTION') private db: NodePgDatabase<typeof schema>,
  ) {}
}
```

## 쿼리 작성

### 기본 CRUD 작업

```typescript
// 조회
const users = await this.db
  .select()
  .from(users)
  .where(eq(users.isActive, true));

// 생성
const newUser = await this.db
  .insert(users)
  .values({
    email: 'user@example.com',
    password: 'hashedPassword',
    name: 'John Doe',
  })
  .returning();

// 수정
const updatedUser = await this.db
  .update(users)
  .set({ name: 'Jane Doe', updatedAt: new Date() })
  .where(eq(users.id, userId))
  .returning();

// 삭제
await this.db.delete(users).where(eq(users.id, userId));
```

### 복잡한 쿼리

```typescript
// 조인 쿼리
const usersWithPosts = await this.db
  .select({
    user: users,
    post: posts,
  })
  .from(users)
  .leftJoin(posts, eq(users.id, posts.authorId))
  .where(eq(users.isActive, true));

// 관계 쿼리
const userWithPosts = await this.db.query.users.findFirst({
  where: eq(users.id, userId),
  with: {
    posts: true,
  },
});
```

## 마이그레이션

### drizzle.config.ts

```typescript
import type { Config } from 'drizzle-kit';

export default {
  schema: './src/database/schema/*',
  out: './src/database/migrations',
  driver: 'pg',
  dbCredentials: {
    connectionString: process.env.DATABASE_URL,
  },
} satisfies Config;
```

### 마이그레이션 명령어

```bash
# 마이그레이션 생성
pnpm drizzle-kit generate:pg

# 마이그레이션 실행
pnpm drizzle-kit push:pg

# 스키마 동기화
pnpm drizzle-kit introspect:pg
```

## 타입 안전성

- 모든 쿼리는 타입 안전
- 스키마에서 타입 자동 추론
- 컴파일 타임에 오류 감지
- IntelliSense 자동완성 지원

## 베스트 프랙티스

1. 스키마를 별도 파일로 분리
2. 관계 정의를 명확히 작성
3. 타입 추론 활용
4. 트랜잭션 사용 시 적절한 격리 수준 설정
5. 인덱스 적절히 활용
