---
globs: package.json,pnpm-lock.yaml,.npmrc
description: pnpm 패키지 관리 및 스크립트 가이드
---

# pnpm 패키지 관리 가이드

## 기본 명령어

### 패키지 설치

```bash
# 의존성 설치
pnpm install

# 패키지 추가
pnpm add package-name

# 개발 의존성 추가
pnpm add -D package-name

# 전역 패키지 설치
pnpm add -g package-name

# 특정 버전 설치
pnpm add package-name@version
```

### 패키지 제거

```bash
# 패키지 제거
pnpm remove package-name

# 개발 의존성 제거
pnpm remove -D package-name
```

## 프로젝트 스크립트

[package.json](mdc:package.json)에 정의된 스크립트들:

### 개발 관련

```bash
# 개발 서버 시작 (파일 변경 감지)
pnpm start:dev

# 디버그 모드로 시작
pnpm start:debug

# 프로덕션 빌드
pnpm build

# 프로덕션 실행
pnpm start:prod
```

### 코드 품질

```bash
# 코드 포맷팅
pnpm format

# 린팅 및 자동 수정
pnpm lint

# 타입 체크
pnpm type-check
```

### 테스트

```bash
# 단위 테스트 실행
pnpm test

# 테스트 감시 모드
pnpm test:watch

# 테스트 커버리지
pnpm test:cov

# E2E 테스트
pnpm test:e2e
```

## 권장 패키지

### 핵심 NestJS 패키지

```bash
# 기본 NestJS
pnpm add @nestjs/common @nestjs/core @nestjs/platform-express

# 설정 관리
pnpm add @nestjs/config

# 검증
pnpm add class-validator class-transformer

# Swagger/OpenAPI
pnpm add @nestjs/swagger swagger-ui-express
```

### Drizzle ORM

```bash
# Drizzle ORM
pnpm add drizzle-orm postgres

# Drizzle Kit (개발 도구)
pnpm add -D drizzle-kit
```

### 유틸리티

```bash
# 환경변수 로딩
pnpm add dotenv

# 날짜 처리
pnpm add date-fns

# UUID 생성
pnpm add uuid
pnpm add -D @types/uuid

# 비밀번호 해싱
pnpm add bcrypt
pnpm add -D @types/bcrypt
```

### 인증 관련

```bash
# JWT
pnpm add @nestjs/jwt

# Passport
pnpm add @nestjs/passport passport passport-local passport-jwt
pnpm add -D @types/passport-local @types/passport-jwt
```

## .npmrc 설정

프로젝트 루트에 `.npmrc` 파일 생성:

```ini
# pnpm 설정
auto-install-peers=true
strict-peer-dependencies=false

# 레지스트리 설정
registry=https://registry.npmjs.org/

# 캐시 설정
store-dir=~/.pnpm-store

# 로그 레벨
loglevel=warn
```

## 워크스페이스 구성 (모노레포)

`pnpm-workspace.yaml` (필요한 경우):

```yaml
packages:
  - 'packages/*'
  - 'apps/*'
  - 'libs/*'
```

## 스크립트 추가 권장사항

### 데이터베이스 관련

```json
{
  "scripts": {
    "db:generate": "drizzle-kit generate:pg",
    "db:push": "drizzle-kit push:pg",
    "db:studio": "drizzle-kit studio",
    "db:migrate": "tsx src/database/migrate.ts",
    "db:seed": "tsx src/database/seed.ts"
  }
}
```

### 개발 환경

```json
{
  "scripts": {
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:logs": "docker-compose logs -f",
    "dev": "pnpm docker:up && pnpm start:dev"
  }
}
```

### 빌드 및 배포

```json
{
  "scripts": {
    "build:clean": "rimraf dist",
    "prebuild": "pnpm build:clean",
    "type-check": "tsc --noEmit",
    "precommit": "pnpm lint && pnpm test"
  }
}
```

## 성능 최적화

### 의존성 최적화

- `pnpm ls` - 설치된 패키지 확인
- `pnpm outdated` - 업데이트 가능한 패키지 확인
- `pnpm audit` - 보안 취약점 검사
- `pnpm prune` - 사용하지 않는 패키지 제거

### 캐시 관리

```bash
# 캐시 확인
pnpm store status

# 캐시 정리
pnpm store prune
```

## 팀 개발

### 락 파일 관리

- `pnpm-lock.yaml`을 버전 관리에 포함
- CI/CD에서 `pnpm install --frozen-lockfile` 사용
- 팀원 간 동일한 pnpm 버전 사용 권장
