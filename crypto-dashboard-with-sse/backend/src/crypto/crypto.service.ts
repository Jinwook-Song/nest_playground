import { Injectable } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { Observable, tap } from 'rxjs';
import { map, catchError, of } from 'rxjs';

@Injectable()
export class CryptoService {
  private lastSuccessfulData: any[] = [];
  private lastFetchTime: number = 0;
  private readonly CACHE_DURATION = 5000; // 5Ï¥à Ï∫êÏãú

  constructor(private readonly httpService: HttpService) {}

  getAssets(): Observable<any> {
    const now = Date.now();

    // Ï∫êÏãúÎêú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÍ≥† ÏïÑÏßÅ Ïú†Ìö®ÌïòÎã§Î©¥ Ï∫êÏãú Î∞òÌôò
    if (
      this.lastSuccessfulData.length > 0 &&
      now - this.lastFetchTime < this.CACHE_DURATION
    ) {
      console.log('üì¶ Ï∫êÏãúÎêú Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö© Ï§ë...');
      return of(this.lastSuccessfulData);
    }

    console.log('üåê CoinGecko API ÏÉàÎ°ú ÏöîÏ≤≠...');
    // CoinGeckoÏùò Î™®Îì† ÏΩîÏù∏ Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
    return this.httpService
      .get('https://api.coingecko.com/api/v3/coins/markets', {
        params: {
          vs_currency: 'usd',
          order: 'market_cap_desc',
          per_page: 20,
          page: 1,
          sparkline: false,
        },
        timeout: 5000, // 10Ï¥à ÌÉÄÏûÑÏïÑÏõÉ
      })
      .pipe(
        tap((response) => {
          console.log('üåê CoinGecko API ÏùëÎãµ ÏÉÅÌÉú:', response.status);
          console.log('üåê Rate Limit Ìó§Îçî:', {
            remaining: response.headers['x-ratelimit-remaining'],
            limit: response.headers['x-ratelimit-limit'],
            reset: response.headers['x-ratelimit-reset'],
          });
        }),
        map((response) => {
          // ‚úÖ ÏÑ±Í≥µ Ïãú Ï∫êÏãú ÏóÖÎç∞Ïù¥Ìä∏
          this.lastSuccessfulData = response.data;
          this.lastFetchTime = Date.now();
          console.log('‚úÖ ÏÉà Îç∞Ïù¥ÌÑ∞ Ï∫êÏãúÏóê Ï†ÄÏû•Îê®');
          return response.data;
        }),
        catchError((error) => {
          console.error('üö® CoinGecko API Error:');
          console.error('- Status:', error.response?.status);
          console.error('- Message:', error.message);
          console.error('- Headers:', error.response?.headers);

          if (error.response?.status === 429) {
            console.error('‚ö†Ô∏è Rate Limit Ï¥àÍ≥º! Ï∫êÏãúÎêú Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©');
          }

          // ÏóêÎü¨ Ïãú Ï∫êÏãúÎêú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ Î∞òÌôò, ÏóÜÏúºÎ©¥ Îπà Î∞∞Ïó¥
          return of(
            this.lastSuccessfulData.length > 0 ? this.lastSuccessfulData : [],
          );
        }),
      );
  }
}
