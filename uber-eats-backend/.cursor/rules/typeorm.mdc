---
description: TypeORM 데이터베이스 작업 가이드라인
globs: *.entity.ts,*.repository.ts,*database*,*entity*,*repository*
---

# TypeORM 가이드라인

## 엔티티 작성

- 엔티티 파일명: `*.entity.ts`
- `@Entity()` 데코레이터 사용
- 기본 키는 `@PrimaryGeneratedColumn()` 또는 `@PrimaryColumn()` 사용
- 컬럼은 `@Column()` 데코레이터로 정의

```typescript
import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';

@Entity()
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @Column({ unique: true })
  email: string;

  @Column({ default: true })
  isActive: boolean;
}
```

## 관계 설정

- 일대다: `@OneToMany()`, `@ManyToOne()`
- 다대다: `@ManyToMany()`, `@JoinTable()`
- 일대일: `@OneToOne()`, `@JoinColumn()`

## 리포지토리 패턴

- 커스텀 리포지토리: `*.repository.ts`
- `@Injectable()` 데코레이터와 함께 사용
- `@InjectRepository()` 로 의존성 주입

```typescript
@Injectable()
export class UserService {
  constructor(
    @InjectRepository(User)
    private userRepository: Repository<User>,
  ) {}

  async findAll(): Promise<User[]> {
    return this.userRepository.find();
  }
}
```

## 마이그레이션

- 데이터베이스 스키마 변경은 마이그레이션 파일로 관리
- `synchronize: false` 프로덕션 환경에서 사용

## 설정

- `TypeOrmModule.forRoot()` 또는 `TypeOrmModule.forRootAsync()` 사용
- 환경 변수로 데이터베이스 설정 관리

## 쿼리 빌더

- 복잡한 쿼리는 QueryBuilder 사용
- Raw SQL보다는 QueryBuilder 권장

## 트랜잭션

- `@Transaction()` 데코레이터 또는 `queryRunner` 사용
- 데이터 일관성이 중요한 작업에 필수 적용
