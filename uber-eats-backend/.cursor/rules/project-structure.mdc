---
alwaysApply: true
description: 전체 프로젝트 구조 및 개발 워크플로우 가이드
---

# Uber Eats Backend 프로젝트 구조

## 기술 스택

- **프레임워크**: NestJS v11
- **언어**: TypeScript
- **패키지 매니저**: pnpm
- **데이터베이스 ORM**: TypeORM
- **API**: GraphQL
- **테스트**: Jest

## 디렉토리 구조

```
src/
├── app.module.ts          # 루트 모듈
├── main.ts               # 애플리케이션 진입점
├── common/               # 공통 유틸리티, 가드, 인터셉터
├── config/               # 환경 설정
├── database/             # 데이터베이스 설정 및 마이그레이션
├── modules/              # 기능별 모듈들
│   ├── auth/            # 인증/인가
│   ├── users/           # 사용자 관리
│   ├── restaurants/     # 레스토랑 관리
│   ├── orders/          # 주문 관리
│   └── payments/        # 결제 관리
└── shared/              # 공유 DTO, 엔티티, 인터페이스
```

## 모듈별 구조 예시

```
modules/users/
├── users.module.ts      # 모듈 정의
├── users.service.ts     # 비즈니스 로직
├── users.resolver.ts    # GraphQL 리졸버
├── entities/
│   └── user.entity.ts   # 사용자 엔티티
├── dto/
│   ├── create-user.input.ts
│   └── update-user.input.ts
└── users.spec.ts        # 테스트 파일
```

## 네이밍 컨벤션

- **파일명**: kebab-case (예: `user-profile.service.ts`)
- **클래스명**: PascalCase (예: `UserProfileService`)
- **변수/함수명**: camelCase (예: `getUserProfile`)
- **상수명**: UPPER_SNAKE_CASE (예: `MAX_LOGIN_ATTEMPTS`)
- **인터페이스**: I 접두사 (예: `IUserRepository`)

## 개발 워크플로우

1. **기능 개발 순서**:
   - 엔티티 정의 → DTO/Input 타입 → 서비스 → 리졸버 → 테스트
2. **코드 작성 전 실행**: `pnpm lint`
3. **개발 서버 실행**: `pnpm start:dev`
4. **테스트 실행**: `pnpm test`

## 환경 설정

- 환경 변수: `.env` 파일 사용
- 개발/프로덕션 환경 분리
- `@nestjs/config` 모듈로 설정 관리

## API 설계 원칙

- RESTful 원칙 준수
- GraphQL Schema First가 아닌 Code First 접근
- 적절한 HTTP 상태 코드 사용
- 에러 처리 표준화

## 보안 고려사항

- JWT 토큰 기반 인증
- 입력 데이터 검증 (`class-validator`)
- SQL 인젝션 방지 (TypeORM 활용)
- CORS 설정
- Rate Limiting 적용

## 성능 최적화

- 데이터베이스 쿼리 최적화
- GraphQL DataLoader 패턴 적용
- 캐싱 전략 수립
- 불필요한 N+1 쿼리 방지
