services:
  # Redis 서비스
  redis:
    image: redis:7-alpine
    container_name: nestjs-redis
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # 백엔드 서버 1
  backend-1:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: nestjs-backend-1
    ports:
      - '3001:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SERVER_ID=backend-1
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    command: npm run dev

  # 백엔드 서버 2 (로드밸런싱 테스트용)
  backend-2:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: nestjs-backend-2
    ports:
      - '3002:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SERVER_ID=backend-2
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    command: npm run dev

  # Nginx 로드밸런서
  nginx:
    image: nginx:alpine
    container_name: nestjs-nginx
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend-1
      - backend-2
    networks:
      - app-network

volumes:
  redis_data:

networks:
  app-network:
    driver: bridge
